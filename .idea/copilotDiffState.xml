<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/funnutv/InnerAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/funnutv/InnerAdapter.kt" />
              <option name="originalContent" value="package com.example.funnutv&#10;&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.media3.common.MediaItem&#10;import androidx.media3.exoplayer.ExoPlayer&#10;import androidx.media3.ui.PlayerView&#10;import androidx.recyclerview.widget.RecyclerView&#10;&#10;&#10;class InnerAdapter(&#10;    private var items: List&lt;MyItem&gt;,&#10;    private val exoPlayer: ExoPlayer&#10;) : RecyclerView.Adapter&lt;InnerAdapter.InnerViewHolder&gt;() {&#10;&#10;    private var currentPlayPos: Int = RecyclerView.NO_POSITION&#10;&#10;    class InnerViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val playerView: PlayerView = itemView.findViewById(R.id.playerView)&#10;        val descriptionText: TextView = itemView.findViewById(R.id.descriptionText)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): InnerViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.video_item_layout, parent, false)&#10;        return InnerViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: InnerViewHolder, position: Int) {&#10;        val actualPos = position % items.size&#10;        val item = items[actualPos]&#10;&#10;        holder.descriptionText.text = item.description&#10;&#10;        // Always detach player from all PlayerViews except the current&#10;        if (position == currentPlayPos) {&#10;            holder.playerView.player = exoPlayer&#10;        } else {&#10;            holder.playerView.player = null&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = if (items.isNotEmpty()) Int.MAX_VALUE else 0&#10;&#10;    fun updateItems(newItems: List&lt;MyItem&gt;) {&#10;        this.items = newItems&#10;        currentPlayPos = RecyclerView.NO_POSITION&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    fun playVideoAt(position: Int) {&#10;        if (items.isEmpty()) return&#10;        val actualPos = position % items.size&#10;        val item = items[actualPos]&#10;&#10;        val oldPos = currentPlayPos&#10;        currentPlayPos = position&#10;&#10;        exoPlayer.setMediaItem(MediaItem.fromUri(item.title))&#10;        exoPlayer.prepare()&#10;        exoPlayer.playWhenReady = true&#10;&#10;        // Detach player from previous PlayerView, attach to new one&#10;        if (oldPos != RecyclerView.NO_POSITION) notifyItemChanged(oldPos)&#10;        notifyItemChanged(currentPlayPos)&#10;    }&#10;&#10;    fun releasePlayerView() {&#10;        val oldPos = currentPlayPos&#10;        currentPlayPos = RecyclerView.NO_POSITION&#10;        if (oldPos != RecyclerView.NO_POSITION) {&#10;            notifyItemChanged(oldPos)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.funnutv&#10;&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.media3.common.MediaItem&#10;import androidx.media3.exoplayer.ExoPlayer&#10;import androidx.media3.ui.PlayerView&#10;import androidx.recyclerview.widget.RecyclerView&#10;&#10;&#10;class InnerAdapter(&#10;    private var items: List&lt;MyItem&gt;,&#10;    private val exoPlayer: ExoPlayer&#10;) : RecyclerView.Adapter&lt;InnerAdapter.InnerViewHolder&gt;() {&#10;&#10;    private var currentPlayPos: Int = RecyclerView.NO_POSITION&#10;&#10;    class InnerViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val playerView: PlayerView = itemView.findViewById(R.id.playerView)&#10;        val descriptionText: TextView = itemView.findViewById(R.id.descriptionText)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): InnerViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.video_item_layout, parent, false)&#10;        return InnerViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: InnerViewHolder, position: Int) {&#10;        val actualPos = position % items.size&#10;        val item = items[actualPos]&#10;        holder.descriptionText.text = item.description&#10;&#10;        // Detach player from recycled views&#10;        if (position == currentPlayPos) {&#10;            holder.playerView.player = exoPlayer&#10;        } else {&#10;            // Detach player from non-current views&#10;            if (holder.playerView.player != null) {&#10;                holder.playerView.player = null&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = if (items.isNotEmpty()) Int.MAX_VALUE else 0&#10;&#10;    fun updateItems(newItems: List&lt;MyItem&gt;) {&#10;        this.items = newItems&#10;        currentPlayPos = RecyclerView.NO_POSITION&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    fun playVideoAt(position: Int) {&#10;        if (items.isEmpty()) return&#10;        val actualPos = position % items.size&#10;        val item = items[actualPos]&#10;        val oldPos = currentPlayPos&#10;        currentPlayPos = position&#10;&#10;        // Only set new media item if URI is different&#10;        val currentMediaItem = exoPlayer.currentMediaItem&#10;        if (currentMediaItem == null || currentMediaItem.mediaId != item.title) {&#10;            exoPlayer.setMediaItem(MediaItem.fromUri(item.title))&#10;            exoPlayer.prepare()&#10;        }&#10;        exoPlayer.playWhenReady = true&#10;&#10;        // Detach player from previous PlayerView, attach to new one&#10;        if (oldPos != RecyclerView.NO_POSITION) notifyItemChanged(oldPos)&#10;        notifyItemChanged(currentPlayPos)&#10;    }&#10;&#10;    fun releasePlayerView() {&#10;        val oldPos = currentPlayPos&#10;        currentPlayPos = RecyclerView.NO_POSITION&#10;        if (oldPos != RecyclerView.NO_POSITION) {&#10;            notifyItemChanged(oldPos)&#10;        }&#10;        // Release player from all views&#10;        exoPlayer.playWhenReady = false&#10;        exoPlayer.stop()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/funnutv/OuterAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/funnutv/OuterAdapter.kt" />
              <option name="originalContent" value="package com.example.funnutv&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.media3.exoplayer.ExoPlayer&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.PagerSnapHelper&#10;import androidx.recyclerview.widget.RecyclerView&#10;&#10;class OuterAdapter(&#10;    private val outerList: List&lt;List&lt;MyItem&gt;&gt;,&#10;    private val exoPlayer: ExoPlayer&#10;) : RecyclerView.Adapter&lt;OuterAdapter.OuterViewHolder&gt;() {&#10;&#10;    class OuterViewHolder(itemView: View, exoPlayer: ExoPlayer) : RecyclerView.ViewHolder(itemView) {&#10;        val innerRecycler: RecyclerView = itemView.findViewById(R.id.innerRecyclerView)&#10;        val innerAdapter = InnerAdapter(emptyList(), exoPlayer)&#10;        private val snapHelper = PagerSnapHelper()&#10;&#10;        init {&#10;            innerRecycler.layoutManager =&#10;                LinearLayoutManager(itemView.context, LinearLayoutManager.HORIZONTAL, false)&#10;            innerRecycler.adapter = innerAdapter&#10;            snapHelper.attachToRecyclerView(innerRecycler)&#10;&#10;            innerRecycler.addOnScrollListener(object : RecyclerView.OnScrollListener() {&#10;                override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {&#10;                    if (newState == RecyclerView.SCROLL_STATE_IDLE) {&#10;                        val snapView = snapHelper.findSnapView(recyclerView.layoutManager)&#10;                        if (snapView != null) {&#10;                            val pos = recyclerView.getChildAdapterPosition(snapView)&#10;                            innerAdapter.playVideoAt(pos)&#10;                        }&#10;                    }&#10;                }&#10;            })&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): OuterViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.outer_item_layout, parent, false)&#10;        return OuterViewHolder(view, exoPlayer)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: OuterViewHolder, position: Int) {&#10;        val actualPos = position % outerList.size&#10;        val innerItems = outerList[actualPos]&#10;&#10;        // detach any old binding&#10;        holder.innerAdapter.releasePlayerView()&#10;&#10;        holder.innerAdapter.updateItems(innerItems)&#10;&#10;        if (innerItems.isNotEmpty()) {&#10;            val middle = Int.MAX_VALUE / 2&#10;            val start = middle - (middle % innerItems.size)&#10;            holder.innerRecycler.scrollToPosition(start)&#10;            holder.innerAdapter.playVideoAt(start)&#10;        }&#10;    }&#10;&#10;&#10;    override fun getItemCount() = if (outerList.isNotEmpty()) Int.MAX_VALUE else 0&#10;&#10;    override fun onViewRecycled(holder: OuterViewHolder) {&#10;        super.onViewRecycled(holder)&#10;        // release player view when vertical item goes off-screen&#10;        holder.innerAdapter.releasePlayerView()&#10;    }&#10;&#10;    fun onOuterPageSelected(position: Int) {&#10;        val actualPos = position % outerList.size&#10;        notifyItemChanged(position) // ensures rebind triggers inner autoplay&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.funnutv&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.media3.exoplayer.ExoPlayer&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.PagerSnapHelper&#10;import androidx.recyclerview.widget.RecyclerView&#10;&#10;class OuterAdapter(&#10;    private val outerList: List&lt;List&lt;MyItem&gt;&gt;,&#10;    private val exoPlayer: ExoPlayer&#10;) : RecyclerView.Adapter&lt;OuterAdapter.OuterViewHolder&gt;() {&#10;&#10;    class OuterViewHolder(itemView: View, exoPlayer: ExoPlayer) : RecyclerView.ViewHolder(itemView) {&#10;        val innerRecycler: RecyclerView = itemView.findViewById(R.id.innerRecyclerView)&#10;        val innerAdapter = InnerAdapter(emptyList(), exoPlayer)&#10;        private val snapHelper = PagerSnapHelper()&#10;&#10;        init {&#10;            innerRecycler.layoutManager =&#10;                LinearLayoutManager(itemView.context, LinearLayoutManager.HORIZONTAL, false)&#10;            innerRecycler.adapter = innerAdapter&#10;            snapHelper.attachToRecyclerView(innerRecycler)&#10;&#10;            innerRecycler.addOnScrollListener(object : RecyclerView.OnScrollListener() {&#10;                override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {&#10;                    if (newState == RecyclerView.SCROLL_STATE_IDLE) {&#10;                        val snapView = snapHelper.findSnapView(recyclerView.layoutManager)&#10;                        if (snapView != null) {&#10;                            val pos = recyclerView.getChildAdapterPosition(snapView)&#10;                            innerAdapter.playVideoAt(pos)&#10;                        }&#10;                    }&#10;                }&#10;            })&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): OuterViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.outer_item_layout, parent, false)&#10;        return OuterViewHolder(view, exoPlayer)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: OuterViewHolder, position: Int) {&#10;        val actualPos = position % outerList.size&#10;        val innerItems = outerList[actualPos]&#10;&#10;        // Release player from previous PlayerView&#10;        holder.innerAdapter.releasePlayerView()&#10;&#10;        holder.innerAdapter.updateItems(innerItems)&#10;&#10;        if (innerItems.isNotEmpty()) {&#10;            val middle = Int.MAX_VALUE / 2&#10;            val start = middle - (middle % innerItems.size)&#10;            holder.innerRecycler.scrollToPosition(start)&#10;            holder.innerAdapter.playVideoAt(start)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = if (outerList.isNotEmpty()) Int.MAX_VALUE else 0&#10;&#10;    override fun onViewRecycled(holder: OuterViewHolder) {&#10;        super.onViewRecycled(holder)&#10;        holder.innerAdapter.releasePlayerView()&#10;    }&#10;&#10;    fun onOuterPageSelected(position: Int) {&#10;        notifyItemChanged(position)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/funnutv/VideoItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/funnutv/VideoItem.kt" />
              <option name="updatedContent" value="package com.example.funnutv&#10;&#10;data class VideoItem(&#10;    val id: String,&#10;    val videoUrl: String,&#10;    val title: String = &quot;&quot;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>